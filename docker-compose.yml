version: '3.8'

services:
  # Main application
  name-matching-api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=production
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_USER=nameuser
      - DB_PASSWORD=namepass
      - DB_NAME=namematching
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - JWT_SECRET_KEY=your-secret-key-change-in-production
    depends_on:
      - mysql
      - redis
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    restart: unless-stopped
    networks:
      - name-matching-network

  # Development version
  name-matching-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    ports:
      - "8001:8000"
    environment:
      - ENVIRONMENT=development
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_USER=nameuser
      - DB_PASSWORD=namepass
      - DB_NAME=namematching
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - JWT_SECRET_KEY=dev-secret-key
    depends_on:
      - mysql
      - redis
    volumes:
      - .:/app
      - ./data:/app/data
      - ./logs:/app/logs
    restart: unless-stopped
    networks:
      - name-matching-network
    profiles:
      - dev

  # GPU-enabled version
  name-matching-gpu:
    build:
      context: .
      dockerfile: Dockerfile
      target: gpu
    ports:
      - "8002:8000"
    environment:
      - ENVIRONMENT=production
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_USER=nameuser
      - DB_PASSWORD=namepass
      - DB_NAME=namematching
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - JWT_SECRET_KEY=your-secret-key-change-in-production
      - CUDA_VISIBLE_DEVICES=0
    depends_on:
      - mysql
      - redis
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    restart: unless-stopped
    networks:
      - name-matching-network
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    profiles:
      - gpu

  # MySQL Database
  mysql:
    image: mysql:8.0
    environment:
      - MYSQL_ROOT_PASSWORD=rootpass
      - MYSQL_DATABASE=namematching
      - MYSQL_USER=nameuser
      - MYSQL_PASSWORD=namepass
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    restart: unless-stopped
    networks:
      - name-matching-network
    command: --default-authentication-plugin=mysql_native_password

  # Redis Cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - name-matching-network
    command: redis-server --appendonly yes

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - name-matching-api
    restart: unless-stopped
    networks:
      - name-matching-network
    profiles:
      - proxy

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - name-matching-network
    profiles:
      - monitoring

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - name-matching-network
    profiles:
      - monitoring

volumes:
  mysql_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  name-matching-network:
    driver: bridge
